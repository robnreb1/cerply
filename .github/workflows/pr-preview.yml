name: PR Preview
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  preview:
    if: contains(github.event.pull_request.labels.*.name, 'preview')
    runs-on: ubuntu-latest
    env:
      VERCEL_PROJECT_DIR: web
      PREVIEW_API_ORIGIN: https://cerply-api-staging-latest.onrender.com
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_GIT_COMMIT_SHA: ${{ github.sha }}
      VERCEL_GIT_COMMIT_REF: ${{ github.ref_name }}
      VERCEL_GIT_REPO_SLUG: ${{ github.event.repository.name }}
      VERCEL_GIT_REPO_OWNER: ${{ github.repository_owner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git safe.directory for workspace
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Git safe.directory for web subdir
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE/$VERCEL_PROJECT_DIR"

      - name: Sanity checks
        run: |
          test -f "$VERCEL_PROJECT_DIR/package.json" || { echo "missing $VERCEL_PROJECT_DIR/package.json"; exit 1; }
          test -f "$VERCEL_PROJECT_DIR/package-lock.json" || echo "warn: no lockfile (cache will be a miss)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ env.VERCEL_PROJECT_DIR }}/package-lock.json

      - name: Install deps
        working-directory: ${{ env.VERCEL_PROJECT_DIR }}
        run: |
          npx --yes npm@10.8.2 --version >/dev/null 2>&1 || true
          # simple retry
          for i in 1 2 3; do
            npm ci && break || {
              echo "npm ci attempt $i failed; retrying in 10s…"
              sleep 10
            }
          done

      - name: Inject preview env
        run: |
          mkdir -p "$VERCEL_PROJECT_DIR/.vercel"
          {
            echo "NEXT_PUBLIC_API_BASE=${PREVIEW_API_ORIGIN}"
            echo "NEXT_PUBLIC_PREVIEW_CERTIFIED_UI=true"
          } > "$VERCEL_PROJECT_DIR/.vercel/.env.preview.local"
          echo "--- injected .env.preview.local ---"
          cat "$VERCEL_PROJECT_DIR/.vercel/.env.preview.local" || true

      - name: Write Vercel project.json
        run: |
          mkdir -p "$VERCEL_PROJECT_DIR/.vercel"
          cat > "$VERCEL_PROJECT_DIR/.vercel/project.json" <<EOF
          {
            "orgId": "${VERCEL_ORG_ID}",
            "projectId": "${VERCEL_PROJECT_ID}"
          }
          EOF
          echo "--- wrote .vercel/project.json ---"
          cat "$VERCEL_PROJECT_DIR/.vercel/project.json" || true

      - name: Verify git state (web)
        run: |
          echo "PWD=$(pwd)"
          git -C "$VERCEL_PROJECT_DIR" rev-parse --is-inside-work-tree || { echo "not a git work tree"; exit 1; }
          git -C "$VERCEL_PROJECT_DIR" rev-parse --show-toplevel || true
          git -C "$VERCEL_PROJECT_DIR" status --porcelain -b || true

      - name: Vercel pull
        run: |
          set -x
          npx vercel --version
          npx vercel pull --yes --environment=preview --cwd "$VERCEL_PROJECT_DIR"

      - name: Vercel build
        run: npx vercel build --cwd "$VERCEL_PROJECT_DIR"

      - name: Vercel deploy (prebuilt)
        id: deploy
        run: |
          set -o pipefail
          out=$(npx vercel deploy --prebuilt \
                --cwd "$VERCEL_PROJECT_DIR" \
                --token "$VERCEL_TOKEN" \
                --scope "$VERCEL_ORG_ID" \
                --yes 2>&1 | tee /tmp/vercel.out) || true
          url=$(grep -Eo 'https://[a-z0-9-]+\.vercel\.app' /tmp/vercel.out | tail -n1 || true)
          echo "url=$url" >> "$GITHUB_OUTPUT"
          test -n "$url" && echo "Preview URL: $url" || echo "No URL captured; see logs"

      - name: Comment with preview URL
        if: steps.deploy.outputs.url != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: preview-url
          recreate: true
          message: |
            ✅ PR Preview ready
            URL: ${{ steps.deploy.outputs.url }}
            Injected:
            - NEXT_PUBLIC_API_BASE=${{ env.PREVIEW_API_ORIGIN }}
            - NEXT_PUBLIC_PREVIEW_CERTIFIED_UI=true
