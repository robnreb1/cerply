name: MVP Traceability Check

on:
  pull_request:
    branches: [main, staging]
    paths:
      - 'docs/specs/**'
      - 'docs/brd/**'
      - 'docs/functional-spec.md'
      - 'scripts/traceability_check.ts'
      - '.github/workflows/traceability.yml'
  workflow_dispatch:

jobs:
  traceability-check:
    name: Validate SSOT Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run traceability check
        run: npm run traceability:check
        
      - name: Generate traceability report
        run: npm run traceability:report
        
      - name: Upload traceability report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: traceability-dashboard
          path: docs/status/traceability-dashboard.md
          
      - name: Comment PR with coverage report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'docs/status/traceability-dashboard.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              const coverageMatch = report.match(/\*\*MVP Coverage\*\* \| \d+\/\d+ \| \*\*(\d+)%\*\*/);
              const evidenceMatch = report.match(/\*\*Evidence Coverage\*\* \| \d+\/\d+ \| \*\*(\d+)%\*\*/);
              
              const coverage = coverageMatch ? coverageMatch[1] : 'Unknown';
              const evidence = evidenceMatch ? evidenceMatch[1] : 'Unknown';
              
              const comment = `## ðŸ“Š MVP Traceability Coverage
              
              **MVP Coverage:** ${coverage}%  
              **Evidence Coverage:** ${evidence}%
              
              [ðŸ“‹ View Full Dashboard](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${context.sha}/${path})
              
              ---
              *This check ensures all MVP use cases are properly tracked and have implementation evidence.*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
