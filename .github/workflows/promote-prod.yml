name: Promote API image to prod

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Source tag to promote (default: prod-candidate)"
        required: false
        default: "prod-candidate"

permissions:
  contents: read
  packages: write

jobs:
  promote:
    name: Promote to :prod (assert linux/amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx (for imagetools)
        uses: docker/setup-buildx-action@v3

      - name: Resolve source tag
        id: resolve_tag
        run: |
          TAG="${{ inputs.tag }}"
          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then TAG="prod-candidate"; fi
          echo "value=$TAG" >> "$GITHUB_OUTPUT"

      - name: Assert source tag has linux/amd64
        id: assert_amd64
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ github.repository_owner }}/cerply-api:${{ steps.resolve_tag.outputs.value }}"
          echo "Inspecting $IMG"
          docker buildx imagetools inspect "$IMG" | grep -q 'linux/amd64' || {
            echo "❌ $IMG does not include linux/amd64 – rebuild in CI with platforms: linux/amd64" >&2
            exit 1
          }

      # Do not push :prod from local; CI builds amd64-only. Promotion enforces linux/amd64.
      - name: Retag to :prod
        run: |
          set -euo pipefail
          SRC="ghcr.io/${{ github.repository_owner }}/cerply-api:${{ steps.resolve_tag.outputs.value }}"
          DEST="ghcr.io/${{ github.repository_owner }}/cerply-api:prod"
          echo "Promoting $SRC -> $DEST"
          docker buildx imagetools create -t "$DEST" "$SRC"

      - name: Trigger Render prod deploy (if configured)
        if: ${{ secrets.RENDER_PROD_DEPLOY_HOOK != '' }}
        run: |
          set -euo pipefail
          curl -fsS -X POST "${{ secrets.RENDER_PROD_DEPLOY_HOOK }}" >/dev/null

      - name: Wait for prod health (if base URL configured)
        if: ${{ secrets.RENDER_PROD_BASE_URL != '' }}
        env:
          BASE: ${{ secrets.RENDER_PROD_BASE_URL }}
        run: |
          set -euo pipefail
          for i in {1..80}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' "$BASE/api/health" || true)
            echo "health:$code"
            [ "$code" = "200" ] && exit 0
            sleep 3
          done
          echo "Prod health did not reach 200" >&2
          exit 1

      - name: Version + image headers (best-effort)
        if: ${{ secrets.RENDER_PROD_BASE_URL != '' }}
        env:
          BASE: ${{ secrets.RENDER_PROD_BASE_URL }}
        run: |
          set -euo pipefail
          curl -sS -D /tmp/prod.h "$BASE/api/version" | jq . || true
          echo "--- image headers ---"
          tr -d '\r' < /tmp/prod.h | grep -Ei '^(x-image-(tag|revision|created)|x-api):' || true


name: Promote API image to prod

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: "Source tag or @digest (e.g., sha-<short> or @sha256:...)"

        required: false
        default: ""
  push:
    branches: [ main, master ]


jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Resolve source_tag if empty
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ github.event.inputs.source_tag }}" ]; then
            OWNER="${{ github.repository_owner }}"
            PKG="cerply-api"
            SRC=$(gh api -H "Accept: application/vnd.github+json" \
              "/users/$OWNER/packages/container/$PKG/versions?per_page=10" \
              | jq -r '[.[] 
                        | .metadata.container.tags // [] 
                        | map(select(. != "prod" and . != "latest"))] 
                       | flatten 
                       | .[0]')
            echo "source_tag=$SRC" >> "$GITHUB_OUTPUT"
          else
            echo "source_tag=${{ github.event.inputs.source_tag }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Promote
        env:
          GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/cerply-api
          SOURCE_TAG: ${{ steps.resolve.outputs.source_tag }}

          TARGET_TAG: prod
        run: |
          bash scripts/ghcr-promote.sh
      - name: Verify digest match
        env:
          GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/cerply-api

          SOURCE_TAG: ${{ steps.resolve.outputs.source_tag }}

        run: |
          REF="${GHCR_IMAGE}:${SOURCE_TAG}"
          [[ "$SOURCE_TAG" == @sha256:* ]] && REF="${GHCR_IMAGE}${SOURCE_TAG}"
          SRC_DIGEST=$(docker buildx imagetools inspect "$REF" --format '{{json .Manifest.Digest}}' | tr -d '"')
          PROD_DIGEST=$(docker buildx imagetools inspect "${GHCR_IMAGE}:prod" --format '{{json .Manifest.Digest}}' | tr -d '"')
          echo "src=$SRC_DIGEST prod=$PROD_DIGEST"
          test -n "$SRC_DIGEST" -a "$SRC_DIGEST" = "$PROD_DIGEST"

      - name: Trigger Render deploy
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          set -euo pipefail
          if [ -z "${RENDER_DEPLOY_HOOK_URL:-}" ]; then
            echo "Missing secret RENDER_DEPLOY_HOOK_URL" >&2
            exit 1
          fi
          curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_URL"

      - name: Wait for health
        run: |
          set -euo pipefail
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" https://api.cerply.com/api/health || true)
            [ "$code" = "200" ] && exit 0
            sleep 10
          done
          echo "health check failed"; exit 1

