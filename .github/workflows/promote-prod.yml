
name: Promote API image to prod

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: "Source tag or @digest (e.g., sha-<short> or @sha256:...)"

        required: false
        default: ""
  push:
    branches: [ main, master ]


permissions:
  contents: read
  packages: write   # needed to read/retag GHCR

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Resolve source_tag if empty
        id: resolve_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # <-- add this so gh is authenticated
          OWNER: ${{ github.repository_owner }}
          PKG: cerply-api
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ inputs.source_tag }}" ]]; then
            echo "value=${{ inputs.source_tag }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Resolving latest non-prod tag from GHCRâ€¦"
          # list container versions and pick newest tag that is NOT 'prod'
          TAG="$(gh api -H "Accept: application/vnd.github+json" \
            "/users/${OWNER}/packages/container/${PKG}/versions?per_page=20" \
            --jq 'map(.metadata.container.tags // []) | add | map(select(. != "prod")) | .[0]')"

          if [[ -z "${TAG}" || "${TAG}" == "null" ]]; then
            echo "Failed to resolve a non-prod tag" >&2
            exit 1
          fi

          echo "Resolved tag: ${TAG}"
          echo "value=${TAG}" >> "$GITHUB_OUTPUT"
      - name: Promote
        env:
          GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/cerply-api
          SOURCE_TAG: ${{ steps.resolve_tag.outputs.value }}

          TARGET_TAG: prod
        run: |
          bash scripts/ghcr-promote.sh
      - name: Verify digest match
        env:
          GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/cerply-api

          SOURCE_TAG: ${{ steps.resolve_tag.outputs.value }}

        run: |
          REF="${GHCR_IMAGE}:${SOURCE_TAG}"
          [[ "$SOURCE_TAG" == @sha256:* ]] && REF="${GHCR_IMAGE}${SOURCE_TAG}"
          SRC_DIGEST=$(docker buildx imagetools inspect "$REF" --format '{{json .Manifest.Digest}}' | tr -d '"')
          PROD_DIGEST=$(docker buildx imagetools inspect "${GHCR_IMAGE}:prod" --format '{{json .Manifest.Digest}}' | tr -d '"')
          echo "src=$SRC_DIGEST prod=$PROD_DIGEST"
          test -n "$SRC_DIGEST" -a "$SRC_DIGEST" = "$PROD_DIGEST"

      - name: Trigger Render deploy
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          set -euo pipefail
          if [ -z "${RENDER_DEPLOY_HOOK_URL:-}" ]; then
            echo "Missing secret RENDER_DEPLOY_HOOK_URL" >&2
            exit 1
          fi
          curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_URL"

      - name: Wait for health
        run: |
          set -euo pipefail
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" https://api.cerply.com/api/health || true)
            [ "$code" = "200" ] && exit 0
            sleep 10
          done
          echo "health check failed"; exit 1

