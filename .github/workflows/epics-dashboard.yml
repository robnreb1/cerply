name: Epics Dashboard
on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 */6 * * *"  # every 6 hours
permissions:
  contents: write
  issues: read
  pull-requests: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Epics Dashboard
        uses: actions/github-script@v7
        id: gen
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function listAllEpicIssues(page=1, acc=[]) {
              const per_page = 100;
              const { data } = await github.rest.issues.listForRepo({
                owner, repo, state: 'all', labels: 'Epic', per_page, page
              });
              if (data.length === 0) return acc;
              return listAllEpicIssues(page+1, acc.concat(data));
            }

            function labelNames(labels=[]) {
              return labels.map(l => (typeof l === 'string' ? l : l.name || '')).map(s => s.toLowerCase());
            }
            function priorityScore(labels=[]) {
              const n = labelNames(labels);
              if (n.includes('p0') || n.includes('priority:critical')) return 0;
              if (n.includes('p1') || n.includes('priority:high'))     return 1;
              if (n.includes('p2') || n.includes('priority:medium'))   return 2;
              if (n.includes('p3') || n.includes('priority:low'))      return 3;
              return 9; // unknown -> lowest
            }
            const priorityLabel = (score) => (score <= 3 ? `P${score}` : 'P?');

            function hasInProgressLabel(issue) {
              return (issue.labels || []).some(l => {
                const n = (typeof l === 'string') ? l : l.name || '';
                return /(^|\b)in[- ]?progress(\b|$)/i.test(n) || /^status:\s*in[- ]?progress$/i.test(n);
              });
            }

            const rowStatus = (it) => (String(it.state).toLowerCase() === 'closed' ? 'done' : 'in-progress');
            const escTitle = (s) => (s||'').replace(/\|/g, '\\|').replace(/]/g, '\\]');

            function statusSection(title, list) {
              if (list.length === 0) return `### ${title}\n\n_No items._\n`;
              const rows = list
                .slice()
                .sort((a,b) => a.number - b.number)
                .map(i => {
                  const assignees = (i.assignees || []).map(a => a.login).join(', ') || '—';
                  return `| #${i.number} | ${escTitle(i.title)} | ${assignees} | ${i.state} |`;
                })
                .join('\n');
              return `### ${title}\n\n| Issue | Title | Assignees | State |\n|---:|---|---|---|\n${rows}\n`;
            }

            (async () => {
              const issues = await listAllEpicIssues();
              const closed = issues.filter(i => i.state === 'closed');
              const open = issues.filter(i => i.state === 'open');
              const inprog = open.filter(hasInProgressLabel);
              const justOpen = open.filter(i => !hasInProgressLabel(i));

              const prioRows = issues.map(i => ({
                number: i.number,
                title: i.title || '',
                url: i.html_url,
                prioS: priorityScore(i.labels),
                prio:  priorityLabel(priorityScore(i.labels)),
                status: rowStatus(i),
                updated: (i.updated_at || '').replace('T',' ').replace(/\..*$/,'')
              })).sort((a,b) => (
                a.prioS - b.prioS ||
                new Date(b.updated) - new Date(a.updated) ||
                a.number - b.number
              ));

              const now = new Date().toISOString();

              let md = '';
              md += '# Epics Dashboard (auto-generated)\n\n';
              md += `_Last updated: ${now}_\n\n`;
              md += 'Epics = issues labeled **Epic**. Priority from labels **P0–P3** or **priority:{critical|high|medium|low}**.\n\n';

              md += '## Priority Summary\n\n';
              md += '| # | Epic | Priority | Status | Updated |\n';
              md += '|---|------|----------|--------|---------|\n';
              for (const r of prioRows) {
                const t = escTitle(r.title);
                md += `| #${r.number} | [${t}](${r.url}) | ${r.prio} | ${r.status} | ${r.updated} |\n`;
              }
              md += '\n';

              md += statusSection('In Progress', inprog) + '\n';
              md += statusSection('Open', justOpen) + '\n';
              md += statusSection('Closed', closed) + '\n';

              md += '> Update labels on epic issues to move them between sections. This file is regenerated by CI.\n';

              fs.mkdirSync('docs/status', { recursive: true });
              fs.writeFileSync('docs/status/epics.md', md, 'utf8');
            })();
      - name: Detect changes
        id: diff
        run: |
          set -euo pipefail
          # Ensure untracked file is considered in diff (intent-to-add)
          git add -N docs/status/epics.md 2>/dev/null || true
          if git diff --quiet -- docs/status/epics.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create/update PR for dashboard refresh
        if: steps.diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "docs(status): refresh Epics Dashboard [skip ci]"
          title: "docs(status): refresh Epics Dashboard"
          body: "Automated refresh of docs/status/epics.md"
          branch: bot/epics-dashboard
          labels: "automation,documentation"
          delete-branch: true
