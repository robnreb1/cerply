name: Epics Dashboard
on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 */6 * * *"  # every 6 hours
permissions:
  contents: write
  issues: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate Epics Dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function listAllEpicIssues(page=1, acc=[]) {
              const per_page = 100;
              const { data } = await github.rest.issues.listForRepo({ owner, repo, state: 'all', labels: 'Epic', per_page, page });
              if (data.length === 0) return acc;
              return listAllEpicIssues(page+1, acc.concat(data));
            }
            function hasInProgressLabel(issue) {
              return (issue.labels || []).some(l => {
                const n = (typeof l === 'string') ? l : l.name || '';
                return /(^|\b)in[- ]?progress(\b|$)/i.test(n) || /^status:\s*in[- ]?progress$/i.test(n);
              });
            }
            function row(i) {
              const num = i.number;
              const title = i.title.replace(/\|/g, '\\|');
              const assignees = (i.assignees || []).map(a => a.login).join(', ') || '—';
              const state = i.state;
              return `| #${num} | ${title} | ${assignees} | ${state} |`;
            }
            (async () => {
              const issues = await listAllEpicIssues();
              const closed = issues.filter(i => i.state === 'closed');
              const open = issues.filter(i => i.state === 'open');
              const inprog = open.filter(hasInProgressLabel);
              const justOpen = open.filter(i => !hasInProgressLabel(i));

              function section(title, list) {
                if (list.length === 0) return `### ${title}\n\n_No items._\n`;
                const rows = list.sort((a,b) => a.number - b.number).map(row).join('\n');
                return `### ${title}\n\n| Issue | Title | Assignees | State |\n|---:|---|---|---|\n${rows}\n`;
              }

              const now = new Date().toISOString();
              const md = [
                '# Epics Dashboard (auto-generated)',
                '',
                `_Last updated: ${now}_`,
                '',
                'Epics = issues labeled **Epic**. “In Progress” = epics with a label like `in-progress`.',
                '',
                section('In Progress', inprog),
                section('Open', justOpen),
                section('Closed', closed),
                '',
                '> Update labels on epic issues to move them between sections. This file is regenerated by CI.',
                ''
              ].join('\n');

              fs.mkdirSync('docs/status', { recursive: true });
              fs.writeFileSync('docs/status/epics.md', md, 'utf8');
            })();
      - name: Commit dashboard if changed
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet -- docs/status/epics.md; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/status/epics.md
          git commit -m "docs(status): refresh Epics Dashboard"
          git push
