# Production Health Monitor - PLATFORM_FOUNDATIONS_v1
# Runs every 15 minutes to track Canon hit rate, Quality Floor, and Cost optimization

name: Production Monitor

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:  # Allow manual trigger

jobs:
  prod-health-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Run production smoke tests
        id: smoke
        continue-on-error: true
        run: |
          API_BASE="https://cerply-api-prod.onrender.com"
          
          echo "🔍 Testing Production API: $API_BASE"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          
          # Health check
          echo "1️⃣ Health Check"
          HEALTH_STATUS=$(curl -sS -w "%{http_code}" -o /tmp/health.json "$API_BASE/api/health" || echo "000")
          echo "Status: $HEALTH_STATUS"
          cat /tmp/health.json 2>/dev/null || echo "(no response)"
          echo ""
          
          # Version check
          echo "2️⃣ Version Check"
          VERSION_STATUS=$(curl -sS -w "%{http_code}" -o /tmp/version.json "$API_BASE/api/version" || echo "000")
          echo "Status: $VERSION_STATUS"
          cat /tmp/version.json 2>/dev/null || echo "(no response)"
          echo ""
          
          # Canon hit rate test
          echo "3️⃣ Canon Hit Rate Test"
          CANON_MISS=$(curl -sS -i "$API_BASE/api/preview" \
            -H "Content-Type: application/json" \
            -d '{"content":"Test content for canon check"}' 2>&1 | grep -i "x-canon:" || echo "x-canon: unknown")
          echo "First call: $CANON_MISS"
          
          sleep 1
          
          CANON_HIT=$(curl -sS -i "$API_BASE/api/preview" \
            -H "Content-Type: application/json" \
            -d '{"content":"Test content for canon check"}' 2>&1 | grep -i "x-canon:" || echo "x-canon: unknown")
          echo "Second call (should hit): $CANON_HIT"
          echo ""
          
          # Quality floor check
          echo "4️⃣ Quality Floor Check"
          QUALITY=$(curl -sS -i "$API_BASE/api/generate" \
            -H "Content-Type: application/json" \
            -d '{"modules":[{"title":"Test Module"}]}' 2>&1 | grep -i "x-quality:" || echo "x-quality: unknown")
          echo "Quality header: $QUALITY"
          echo ""
          
          # Exit with error if any critical endpoint fails
          if [ "$HEALTH_STATUS" != "200" ] || [ "$VERSION_STATUS" != "200" ]; then
            echo "❌ Critical endpoints failing!"
            exit 1
          fi
          
          echo "✅ Production health check passed"
      
      - name: Record metrics
        if: always()
        run: |
          mkdir -p prod-metrics
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "$TIMESTAMP: ${{ steps.smoke.outcome }}" >> prod-metrics/health-log.txt
          
      - name: Upload metrics artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-metrics-${{ github.run_number }}
          path: prod-metrics/
          retention-days: 30
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString();
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            const title = `🚨 Production Monitor Failure - ${timestamp}`;
            const body = `## Production Health Check Failed
            
            **Time:** ${timestamp}
            **Run:** ${runUrl}
            
            ### Failure Details
            
            One or more critical endpoints are not responding correctly:
            - Health endpoint: \`/api/health\`
            - Version endpoint: \`/api/version\`
            
            ### Next Steps
            
            1. Check production service status on Render
            2. Review recent deployments
            3. Check logs: \`https://dashboard.render.com\`
            4. Verify DNS and routing
            
            ### Auto-Resolution
            
            This issue will auto-close if the next monitor run succeeds.
            
            ---
            *Auto-generated by Production Monitor workflow*
            `;
            
            // Check if there's already an open issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'production,monitor,automated'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['production', 'monitor', 'automated', 'priority:high']
              });
            }

