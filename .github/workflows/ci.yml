name: CI

on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  api:
    name: Build & Test (API)
    runs-on: ubuntu-latest
    env:
      ROLLUP_USE_NODE_JS: 'true'
      ROLLUP_SKIP_NODEJS_NATIVE: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'


      - name: Verify lockfiles unchanged
        run: |
          npm ci --ignore-scripts --no-audit --no-fund
          git diff --exit-code package-lock.json || (echo "Root lockfile drifted"; exit 1)

      - name: Install deps (api workspace incl. dev)
        env:
          NODE_ENV: development
          NPM_CONFIG_PRODUCTION: 'false'
        run: |
          npm --prefix api ci --include=dev || npm --prefix api install --no-audit --no-fund --include=dev

      - name: Ensure Rollup native binary on Linux
        run: npm --prefix api install -D @rollup/rollup-linux-x64-gnu@latest || true

      - name: Build API
        run: npm --prefix api run build

      - name: Run API tests
        env:
          NODE_ENV: test
          RATE_LIMIT_ENABLED: 'false'
          ROLLUP_USE_NODE_JS: 'true'
          ROLLUP_SKIP_NODEJS_NATIVE: '1'
        run: npm --prefix api run test


      # NEW â€” start server before smoke
      - name: Start API (background)
        env:

          NODE_ENV: production
          PORT: 8080
          RATE_LIMIT_ENABLED: 'false'
        run: |
          # Launch the API from the workspace so Node can resolve its deps
          npm --prefix api run start &
          echo $! > /tmp/api_pid.txt

          # Wait up to 60s for /api/health to respond
          for i in {1..60}; do

            if curl -fsS http://localhost:8080/api/health >/dev/null; then
              echo "API is up"
              break
            fi
            sleep 1
          done

          # One last check so the step fails early if server didn't come up
          curl -fsS http://localhost:8080/api/health >/dev/null

      - name: API smoke (health/plan/analytics)
        env:
          SMOKE_ALLOW_503: '1'
        run: |
          chmod +x api/scripts/smoke-local.sh
          bash api/scripts/smoke-local.sh

      - name: DB migrate (if DATABASE_URL)
        if: ${{ env.DATABASE_URL != '' }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          npm -w api run db:migrate || true


      - name: API smoke (legacy ingest)
        if: ${{ env.LEGACY_INGEST_SMOKE == 'true' || env.LEGACY_INGEST_SMOKE == '1' }}
        env:
          LEGACY_INGEST_SMOKE: ${{ env.LEGACY_INGEST_SMOKE }}
          API_BASE: http://localhost:8080
        run: |
          chmod +x scripts/smoke-stg.sh
          bash scripts/smoke-stg.sh | sed -n '1,200p'

      - name: Stop API
        if: always()
        run: |
          if [ -f /tmp/api_pid.txt ]; then

            kill "$(cat /tmp/api_pid.txt)" 2>/dev/null || true
          fi
          # Fallback: ensure any lingering API node process is stopped
          pkill -f "node .*api/dist/index.js" 2>/dev/null || true

  pr-typecheck:
    if: ${{ github.event_name == 'pull_request' }}
    name: Typecheck (API & Web)
    runs-on: ubuntu-latest
    env:
      ROLLUP_USE_NODE_JS: 'true'
      ROLLUP_SKIP_NODEJS_NATIVE: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (api)
        working-directory: api
        run: npm install --no-audit --no-fund

      - name: Typecheck (api)
        working-directory: api
        run: npm run typecheck

      - name: Install deps (web)
        working-directory: web
        run: npm install --no-audit --no-fund

      - name: Typecheck (web)
        working-directory: web
        run: npm run typecheck

  docker:
    name: Build & Push Docker image
    needs: api
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute short SHA
        id: git
        run: echo "short=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/cerply-api
          tags: |
            type=raw,value=sha-${{ github.sha }}
            type=raw,value=sha-${{ steps.git.outputs.short }}
            # main branch
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=main-${{ steps.git.outputs.short }},enable=${{ github.ref_name == 'main' }}
            # staging branch
            type=raw,value=staging-latest,enable=${{ github.ref_name == 'staging' }}
            type=raw,value=staging-${{ steps.git.outputs.short }},enable=${{ github.ref_name == 'staging' }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trigger Render staging deploy (on staging only)
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: echo "staging deploy starting"
      - name: Resolve staging deploy hook
        if: ${{ github.ref == 'refs/heads/staging' }}
        id: staging_hook
        uses: ./.github/actions/resolve-render-hook
        with:
          secret: ${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}
          fallback: https://api.render.com/deploy/srv-d34sosgdl3ps73868q0g?key=QtUaDQzEhc0
      - name: Trigger Render staging deploy
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: |
          set -euo pipefail
          curl -fsS -X POST "${{ steps.staging_hook.outputs.value }}" >/dev/null

      - name: Wait for staging health
        if: ${{ github.ref == 'refs/heads/staging' }}
        env:
          BASE: https://cerply-api-staging.onrender.com
        run: |
          set -euo pipefail
          for i in {1..90}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" "$BASE/api/health" || true)
            if [ "$code" = "200" ]; then
              echo "OK: health 200"
              curl -sS -D /tmp/h.txt "$BASE/api/health" >/dev/null || true
              tr -d '\r' < /tmp/h.txt | grep -i '^x-api:' || true
              exit 0
            fi
            sleep 5
          done
          echo "Health never reached 200" >&2
          exit 1

      - name: Version + image headers (best-effort)
        if: ${{ github.ref == 'refs/heads/staging' }}
        env:
          BASE: https://cerply-api-staging.onrender.com
        run: |
          set -euo pipefail
          curl -sS -D /tmp/vh.txt "$BASE/api/version" | jq . || true
          echo "--- image headers ---"
          tr -d '\r' < /tmp/vh.txt | grep -Ei '^x-image-(tag|revision|created):' || true
