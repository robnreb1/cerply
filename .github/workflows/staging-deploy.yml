name: Staging Deploy

on:
  push:
    branches:
      - staging
      - staging/*
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy-stg:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
      PKG: cerply-api
      API_DOCKERFILE: ./api/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER }}/${{ env.PKG }}
          tags: |
            type=raw,value=stg-${{ github.sha }}
            type=sha,prefix=sha-

      - name: Build & Push (staging tag)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.API_DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_SHA=${{ github.sha }}
            IMAGE_TAG=stg-${{ github.sha }}
            IMAGE_CREATED=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] || github.event.head_commit.timestamp || '' }}

      - name: Prepare staging hook
        id: hook
        env:
          RENDER_STG_HOOK: ${{ secrets.RENDER_STG_HOOK }}
        run: |
          if [ -n "${RENDER_STG_HOOK:-}" ]; then
            echo "has_hook=true" >> "$GITHUB_OUTPUT"
            echo "hook=${RENDER_STG_HOOK}" >> "$GITHUB_OUTPUT"
          else
            echo "has_hook=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Trigger Render staging deploy
        if: ${{ steps.hook.outputs.has_hook == 'true' }}
        env:
          RENDER_STG_HOOK: ${{ steps.hook.outputs.hook }}
        run: |
          curl -fsSL -X POST "$RENDER_STG_HOOK"

      - name: Wait for staging health
        run: |
          URL="https://cerply-api-staging.onrender.com/api/health"
          for i in $(seq 1 30); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then
              curl -sS -D /tmp/h.txt "$URL" | jq .
              grep -i '^x-api:' /tmp/h.txt || true
              exit 0
            fi
            sleep 5
          done
          echo "Staging health never reached 200" >&2
          exit 1


