"use client";

import React from "react";

const PLACEHOLDERS = [
  "Paste your meeting notes…",
  "Upload a policy document…",
  "Drop in a podcast transcript…",
];

type Module = { id: string; title: string; category?: string };

function Icon({ children }: { children: React.ReactNode }) {
  // Muted, consistent sizing for each icon container
  return (
    <div className="flex flex-col items-center gap-2 text-black/55">
      <div className="h-10 w-10 rounded-xl border border-black/10 bg-white grid place-items-center">
        {children}
      </div>
    </div>
  );
}

function IconRow() {
  // Inline SVGs to avoid any new deps
  return (
    <div className="mt-4 flex items-center justify-between gap-4 text-xs sm:text-sm text-black/55">
      <div className="flex-1 grid place-items-center">
        <Icon>
          {/* Document */}
          <svg width="20" height="20" viewBox="0 0 24 24" className="opacity-70">
            <path fill="currentColor" d="M6 2h8l4 4v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2Zm7 1v4h4" />
          </svg>
        </Icon>
        <div>Document</div>
      </div>
      <div className="flex-1 grid place-items-center">
        <Icon>
          {/* Link / URL */}
          <svg width="20" height="20" viewBox="0 0 24 24" className="opacity-70">
            <path fill="currentColor" d="M10.59 13.41a1.996 1.996 0 0 0 2.82 0l3.59-3.59a2 2 0 1 0-2.83-2.83l-1.17 1.17M13.41 10.59a1.996 1.996 0 0 0-2.82 0l-3.59 3.59a2 2 0 1 0 2.83 2.83l1.17-1.17" />
          </svg>
        </Icon>
        <div>URL</div>
      </div>
      <div className="flex-1 grid place-items-center">
        <Icon>
          {/* Transcript / Mic */}
          <svg width="20" height="20" viewBox="0 0 24 24" className="opacity-70">
            <path fill="currentColor" d="M12 14a3 3 0 0 0 3-3V6a3 3 0 1 0-6 0v5a3 3 0 0 0 3 3Zm5-3a5 5 0 0 1-10 0H5a7 7 0 0 0 6 6.92V20H9v2h6v-2h-2v-2.08A7 7 0 0 0 19 11h-2Z" />
          </svg>
        </Icon>
        <div>Transcript</div>
      </div>
      <div className="flex-1 grid place-items-center">
        <Icon>
          {/* Shield / Policy */}
          <svg width="20" height="20" viewBox="0 0 24 24" className="opacity-70">
            <path fill="currentColor" d="M12 2 4 5v6c0 5 3.4 9.7 8 11 4.6-1.3 8-6 8-11V5l-8-3Z" />
          </svg>
        </Icon>
        <div>Policy</div>
      </div>
    </div>
  );
}

export default function HomePage() {
  const [placeholder, setPlaceholder] = React.useState(PLACEHOLDERS[0]);
  const [phase, setPhase] = React.useState<"idle"|"processing"|"ready">("idle");
  const [modules, setModules] = React.useState<Module[]>([]);
  const [error, setError] = React.useState<string | null>(null);
  const [inputText, setInputText] = React.useState("");
  const [dragOver, setDragOver] = React.useState(false);

  // Cycle placeholder text
  React.useEffect(() => {
    let i = 0;
    const id = setInterval(() => {
      i = (i + 1) % PLACEHOLDERS.length;
      setPlaceholder(PLACEHOLDERS[i]);
    }, 3000);
    return () => clearInterval(id);
  }, []);

  async function onSubmit(payload: { text?: string; fileName?: string; url?: string }) {
    if (phase === "processing") return;
    setPhase("processing");
    setError(null);

    try {
      // Call your existing edge route (will proxy or fall back)
      const res = await fetch("/api/prompts", { cache: "no-store" });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = (await res.json()) as Module[];
      setModules(data);
      setPhase("ready");
    } catch (e: any) {
      // Local demo fallback
      setModules([
        { id: "demo-1", title: "Welcome to Cerply", category: "demo" },
        { id: "demo-2", title: "Try a curated prompt", category: "demo" },
      ]);
      setPhase("ready");
      setError("Using demo modules (upstream unavailable).");
    }
  }

  function onFileSelect(file: File) {
    onSubmit({ fileName: file.name });
  }

  function onDrop(ev: React.DragEvent) {
    ev.preventDefault();
    ev.stopPropagation();
    setDragOver(false);
    const f = ev.dataTransfer?.files?.[0];
    if (f) onFileSelect(f);
  }

  function onKeyDownTextArea(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    // Enter submits; Shift+Enter makes a newline
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      if (inputText.trim()) onSubmit({ text: inputText });
    }
  }

  const InputCard = (
    <div
      className={`w-full max-w-2xl mx-auto transition rounded-2xl border p-5 bg-white
      ${dragOver ? "border-black/40 shadow-lg" : "border-black/10 shadow-sm"}`}
      onDragOver={(e) => { e.preventDefault(); setDragOver(true); }}
      onDragLeave={() => setDragOver(false)}
      onDrop={onDrop}
    >
      <p className="text-center text-2xl sm:text-3xl font-medium mb-5">
        What will you master today…?
      </p>

      <textarea
        aria-label="Learning input"
        className="w-full h-28 rounded-xl border border-black/10 p-4 outline-none focus:ring-2 focus:ring-black/10"
        placeholder={placeholder}
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
        onKeyDown={onKeyDownTextArea}
      />

      <div className="mt-3 flex items-center gap-3">
        <input
          aria-label="Upload document or media"
          type="file"
          accept=".pdf,.doc,.docx,.txt,.md,.rtf,.html,.htm,.json,.csv,.xml,audio/*,video/*"
          className="text-sm"
          onChange={(e) => { const f = e.target.files?.[0]; if (f) onFileSelect(f); }}
        />
        {/* Mobile fallback: subtle button. Hidden on >= sm. */}
        <button
          onClick={() => inputText.trim() && onSubmit({ text: inputText })}
          className="ml-auto px-4 py-2 rounded-xl border border-black/10 text-black/70 sm:hidden"
        >
          Learn it
        </button>
      </div>

      <p className="mt-3 text-sm text-black/60">
        Cerply converts anything you give it into personalised micro-learning and tests — so you remember what matters.
      </p>

      {/* Icon row (muted, evenly spaced) */}
      <IconRow />
    </div>
  );

  const Loading = (
    <div className="mt-10 text-center text-black/70">
      <div className="animate-pulse text-lg">Got it. Building your learning modules…</div>
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-3xl mx-auto">
        {[1,2,3,4].map(i => (
          <div key={i} className="rounded-2xl border border-black/10 p-4">
            <div className="h-4 w-2/3 bg-black/10 rounded mb-3" />
            <div className="h-3 w-1/2 bg-black/10 rounded" />
          </div>
        ))}
      </div>
    </div>
  );

  const Cards = (
    <div className="mt-8 max-w-3xl mx-auto grid grid-cols-1 sm:grid-cols-2 gap-4">
      {modules.map(m => (
        <div key={m.id} className="rounded-2xl border border-black/10 p-5 bg-white shadow-sm">
          <div className="text-sm uppercase tracking-wide text-black/40">{m.category ?? "module"}</div>
          <div className="mt-1 font-medium">{m.title}</div>
          <button className="mt-4 text-sm underline underline-offset-4">Open</button>
        </div>
      ))}
    </div>
  );

  return (
    <main className="min-h-[100dvh] bg-neutral-50 text-black">
      <div className="mx-auto px-4 pt-16 pb-28 max-w-5xl">
        {/* Input / States */}
        {phase === "idle" && InputCard}
        {phase === "processing" && Loading}
        {phase === "ready" && Cards}

        {/* Error, if any */}
        {error && (
          <div className="mt-6 max-w-2xl mx-auto text-center text-sm text-amber-700">
            {error}
          </div>
        )}
      </div>

      {/* Trust badges (unchanged) */}
      <div className="fixed inset-x-0 bottom-0 px-4 py-3">
        <div className="max-w-5xl mx-auto text-center text-xs sm:text-sm text-black/50">
          Audit-ready · Expert-reviewed · Adaptive · Private by default
        </div>
      </div>
    </main>
  );
}
