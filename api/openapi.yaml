
openapi: 3.0.3
info: { title: Cerply Core API, version: "0.1.0" }
paths:
  /health:
    get: { summary: Liveness }
  /api/certified/plan:
    post:
      summary: Certified plan
      description: |
        Returns a stub (501) by default when `CERTIFIED_MODE=stub`.
        When `CERTIFIED_MODE=mock`, returns a deterministic mock plan (200).
      responses:
        '200':
          description: Mock plan (when CERTIFIED_MODE=mock)
          content:
            application/json:
              schema:
                type: object
                required: [status, request_id, endpoint, mode, enabled, provenance, plan]
                properties:
                  status: { type: string, enum: [ok] }
                  request_id: { type: string }
                  endpoint: { type: string, enum: [certified.plan] }
                  mode: { type: string, enum: [mock] }
                  enabled: { type: boolean }
                  provenance:
                    type: object
                    required: [planner, proposers, checker]
                    properties:
                      planner: { type: string }
                      proposers:
                        type: array
                        items: { type: string }
                      checker: { type: string }
                  plan:
                    type: object
                    required: [title, items]
                    properties:
                      title: { type: string }
                      items:
                        type: array
                        items:
                          type: object
                          required: [id, type, front, back]
                          properties:
                            id: { type: string }
                            type: { type: string, enum: [card] }
                            front: { type: string }
                            back: { type: string }
        '501':
          description: Stub (default when CERTIFIED_MODE=stub)
          content:
            application/json:
              schema:
                type: object
                required: [status, endpoint, request_id, enabled, message]
                properties:
                  status: { type: string, enum: [stub] }
                  endpoint: { type: string, enum: [certified.plan] }
                  request_id: { type: string }
                  enabled: { type: boolean }
                  message: { type: string }
  /ingest/policy:
    post:
      summary: Register a policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { name: { type: string }, text: { type: string } }
      responses: { '201': { description: Created } }
  /rde/decompose:
    post:
      summary: Decompose policy text
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { policyId: { type: string }, text: { type: string } }
      responses: { '200': { description: OK } }
  /evidence/coverage:
    get:
      summary: Evidence coverage
      parameters: [ { in: query, name: scopeId, schema: { type: string } } ]
      responses: { '200': { description: OK } }
  /api/orchestrator/jobs:
    post:
      summary: Submit Task Packet (preview)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [goal, limits]
              properties:
                goal: { type: string }
                scope: { type: string }
                planRef: { type: string }
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      id: { type: string }
                      type: { type: string }
                      payload: { }
                limits:
                  type: object
                  required: [maxSteps, maxWallMs]
                  properties:
                    maxSteps: { type: integer }
                    maxWallMs: { type: integer }
                flags: { type: object }
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required: [job_id]
                properties:
                  job_id: { type: string }
  /api/orchestrator/jobs/{id}:
    get:
      summary: Get job status (preview)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /api/orchestrator/jobs/{id}/logs:
    get:
      summary: Get recent logs (preview)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: n
          required: false
          schema: { type: integer, minimum: 1, maximum: 200 }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /api/orchestrator/jobs/{id}/cancel:
    post:
      summary: Cancel job (idempotent; preview)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /api/orchestrator/events:
    get:
      summary: Stream job events (SSE, preview)
      parameters:
        - in: query
          name: job
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/admin/certified/sources:
    get:
      summary: List admin sources (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      parameters:
        - in: query
          name: q
          required: false
          schema: { type: string, maxLength: 200 }
          description: Search query for name/url
        - in: query
          name: page
          required: false
          schema: { type: integer, minimum: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 100 }
          description: Items per page (clamped to 100)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sources: { type: array, items: { type: object } }
                  total: { type: integer }
                  page: { type: integer }
                  limit: { type: integer }
        '401': { description: Unauthorized }
    post:
      summary: Create admin source (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string, minLength: 1, maxLength: 120 }
                url: { type: string, format: uri }
                notes: { type: string, maxLength: 2000 }
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  source_id: { type: string }
        '401': { description: Unauthorized }
        '413': { description: Payload too large }
  /api/admin/certified/items:
    get:
      summary: List admin items (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      parameters:
        - in: query
          name: status
          required: false
          schema: { type: string, enum: [pending, approved, rejected, queued, error] }
          description: Filter by status
        - in: query
          name: source_id
          required: false
          schema: { type: string }
          description: Filter by source ID
        - in: query
          name: q
          required: false
          schema: { type: string, maxLength: 200 }
          description: Search query for title/url
        - in: query
          name: page
          required: false
          schema: { type: integer, minimum: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 100 }
          description: Items per page (clamped to 100)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items: { type: array, items: { type: object } }
                  total: { type: integer }
                  page: { type: integer }
                  limit: { type: integer }
        '401': { description: Unauthorized }
  /api/admin/certified/items/ingest:
    post:
      summary: Ingest admin item (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, url]
              properties:
                title: { type: string, minLength: 1, maxLength: 200 }
                url: { type: string, format: uri }
                tags: { type: array, items: { type: string, minLength: 1, maxLength: 40 }, maxItems: 20 }
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  item_id: { type: string }
        '401': { description: Unauthorized }
        '413': { description: Payload too large }
  /api/admin/certified/items/{id}:
    get:
      summary: Get admin item by ID (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not found }
  /api/admin/certified/items/{id}/approve:
    post:
      summary: Approve admin item (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  id: { type: string }
                  status: { type: string, enum: [approved] }
        '401': { description: Unauthorized }
        '404': { description: Not found }
  /api/admin/certified/items/{id}/reject:
    post:
      summary: Reject admin item (ADMIN_PREVIEW=true)
      security:
        - AdminToken: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  id: { type: string }
                  status: { type: string, enum: [rejected] }
        '401': { description: Unauthorized }
        '404': { description: Not found }
  
  # [OKR: O1.KR3, O2.KR1] EPIC #56: Certified Publish v1
  /api/admin/certified/items/{id}/publish:
    post:
      summary: Publish certified item with Ed25519 signature
      description: |
        Admin-gated endpoint to publish a certified item as a signed artifact.
        Requires item to have a lockHash. Idempotent: returns 409 if already published with same lock.
      security:
        - AdminToken: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: AdminItem ID
      responses:
        '200':
          description: Artifact published successfully (first time)
          headers:
            Location:
              schema: { type: string }
              description: "/api/certified/artifacts/{artifactId}"
            Access-Control-Allow-Origin:
              schema: { type: string, enum: ['*'] }
          content:
            application/json:
              schema:
                type: object
                required: [ok, artifact]
                properties:
                  ok: { type: boolean }
                  artifact:
                    type: object
                    required: [id, itemId, sha256, signature, path, createdAt]
                    properties:
                      id: { type: string }
                      itemId: { type: string }
                      sha256: { type: string }
                      signature: { type: string, description: "Base64-encoded Ed25519 signature" }
                      path: { type: string }
                      createdAt: { type: string, format: date-time }
        '409':
          description: Already published (idempotency)
          headers:
            Location:
              schema: { type: string }
            Access-Control-Allow-Origin:
              schema: { type: string, enum: ['*'] }
          content:
            application/json:
              schema:
                type: object
                required: [error, artifact]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [ALREADY_PUBLISHED] }
                      message: { type: string }
                  artifact:
                    type: object
                    required: [id, sha256, createdAt]
                    properties:
                      id: { type: string }
                      sha256: { type: string }
                      createdAt: { type: string, format: date-time }
        '400':
          description: Bad request (e.g., missing lockHash)
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [NO_LOCK_HASH] }
                      message: { type: string }
        '401': { description: Unauthorized }
        '404': { description: Not found }
        '503':
          description: Service unavailable (requires ADMIN_STORE=sqlite)
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [UNSUPPORTED_STORE] }
                      message: { type: string }

  # [OKR: O1.KR2] EPIC #56: Public Artifact Delivery
  /api/certified/artifacts/{artifactId}:
    get:
      summary: Get published artifact JSON
      description: |
        Public endpoint to retrieve signed artifact JSON with CDN-ready headers.
      parameters:
        - in: path
          name: artifactId
          required: true
          schema: { type: string }
          description: Published artifact ID
      responses:
        '200':
          description: Artifact JSON
          headers:
            Access-Control-Allow-Origin:
              schema: { type: string, enum: ['*'] }
              description: "Public CORS (no credentials)"
            ETag:
              schema: { type: string }
              description: "Weak validator: W/\"<sha256>\""
            Cache-Control:
              schema: { type: string, enum: ['public, max-age=300'] }
              description: "CDN-friendly caching (5 minutes)"
            Referrer-Policy:
              schema: { type: string, enum: ['no-referrer'] }
            X-Content-Type-Options:
              schema: { type: string, enum: ['nosniff'] }
          content:
            application/json:
              schema:
                type: object
                required: [version, artifactId, itemId, sourceUrl, lockHash, sha256, createdAtISO]
                properties:
                  version: { type: string, enum: ['cert.v1'] }
                  artifactId: { type: string }
                  itemId: { type: string }
                  sourceUrl: { type: string, nullable: true }
                  lockHash: { type: string, description: "SHA-256 from certification lock step" }
                  sha256: { type: string, description: "SHA-256 of canonical artifact JSON" }
                  createdAtISO: { type: string, format: date-time }
        '404':
          description: Artifact not found
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [NOT_FOUND, FILE_NOT_FOUND] }
                      message: { type: string }

  /api/certified/artifacts/{artifactId}.sig:
    get:
      summary: Get artifact Ed25519 signature (binary)
      description: |
        Public endpoint to retrieve Ed25519 signature as raw binary (64 bytes).
        CDN-ready with same caching headers as artifact JSON.
      parameters:
        - in: path
          name: artifactId
          required: true
          schema: { type: string }
          description: Published artifact ID
      responses:
        '200':
          description: Binary signature (64 bytes)
          headers:
            Access-Control-Allow-Origin:
              schema: { type: string, enum: ['*'] }
            Cache-Control:
              schema: { type: string, enum: ['public, max-age=300'] }
            Referrer-Policy:
              schema: { type: string, enum: ['no-referrer'] }
            X-Content-Type-Options:
              schema: { type: string, enum: ['nosniff'] }
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Artifact not found
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [NOT_FOUND] }
                      message: { type: string }

  # [OKR: O1.KR1, O3.KR2] EPIC #56: Extended Verify Endpoint
  /api/certified/verify:
    post:
      summary: Verify artifact signature and integrity (extended)
      description: |
        Supports three verification modes:
        1. By artifactId: { "artifactId": "..." }
        2. Inline artifact + signature: { "artifact": {...}, "signature": "base64" }
        3. Legacy plan lock: { "plan": {...}, "lock": {...} }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - required: [artifactId]
                  properties:
                    artifactId: { type: string }
                    meta: { type: object, properties: { request_id: { type: string } } }
                - required: [artifact, signature]
                  properties:
                    artifact:
                      type: object
                      description: "Artifact JSON to verify"
                    signature:
                      type: string
                      description: "Base64-encoded Ed25519 signature"
                    meta: { type: object, properties: { request_id: { type: string } } }
                - required: [plan, lock]
                  properties:
                    plan: { type: object }
                    lock:
                      type: object
                      required: [algo, hash]
                      properties:
                        algo: { type: string, enum: [blake3, sha256] }
                        hash: { type: string }
                        canonical_bytes: { type: integer }
                    meta: { type: object, properties: { request_id: { type: string } } }
      responses:
        '200':
          description: Verification result
          headers:
            Access-Control-Allow-Origin:
              schema: { type: string, enum: ['*'] }
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required: [ok]
                    properties:
                      ok: { type: boolean, enum: [true] }
                      artifactId: { type: string }
                      sha256: { type: string }
                      lockHash: { type: string }
                  - type: object
                    required: [ok, reason]
                    properties:
                      ok: { type: boolean, enum: [false] }
                      reason:
                        type: string
                        enum: [lock_mismatch, sha256_mismatch, signature_invalid]
                      details: { type: object }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [BAD_REQUEST] }
                      message: { type: string }
        '404':
          description: Artifact not found
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message]
                    properties:
                      code: { type: string, enum: [NOT_FOUND, FILE_NOT_FOUND] }
                      message: { type: string }
        '413':
          description: Payload too large (exceeds 16KB)
          content:
            application/json:
              schema:
                type: object
                required: [error]
                properties:
                  error:
                    type: object
                    required: [code, message, details]
                    properties:
                      code: { type: string, enum: [PAYLOAD_TOO_LARGE] }
                      message: { type: string }
                      details:
                        type: object
                        required: [limit, size]
                        properties:
                          limit: { type: integer }
                          size: { type: integer }

components:
  securitySchemes:
    AdminToken:
      type: apiKey
      in: header
      name: X-Admin-Token
