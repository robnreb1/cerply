
openapi: 3.0.3
info: { title: Cerply Core API, version: "0.1.0" }
paths:
  /health:
    get: { summary: Liveness }
  /api/certified/plan:
    post:
      summary: Certified plan
      description: |
        Returns a stub (501) by default when `CERTIFIED_MODE=stub`.
        When `CERTIFIED_MODE=mock`, returns a deterministic mock plan (200).
      responses:
        '200':
          description: Mock plan (when CERTIFIED_MODE=mock)
          content:
            application/json:
              schema:
                type: object
                required: [status, request_id, endpoint, mode, enabled, provenance, plan]
                properties:
                  status: { type: string, enum: [ok] }
                  request_id: { type: string }
                  endpoint: { type: string, enum: [certified.plan] }
                  mode: { type: string, enum: [mock] }
                  enabled: { type: boolean }
                  provenance:
                    type: object
                    required: [planner, proposers, checker]
                    properties:
                      planner: { type: string }
                      proposers:
                        type: array
                        items: { type: string }
                      checker: { type: string }
                  plan:
                    type: object
                    required: [title, items]
                    properties:
                      title: { type: string }
                      items:
                        type: array
                        items:
                          type: object
                          required: [id, type, front, back]
                          properties:
                            id: { type: string }
                            type: { type: string, enum: [card] }
                            front: { type: string }
                            back: { type: string }
        '501':
          description: Stub (default when CERTIFIED_MODE=stub)
          content:
            application/json:
              schema:
                type: object
                required: [status, endpoint, request_id, enabled, message]
                properties:
                  status: { type: string, enum: [stub] }
                  endpoint: { type: string, enum: [certified.plan] }
                  request_id: { type: string }
                  enabled: { type: boolean }
                  message: { type: string }
  /ingest/policy:
    post:
      summary: Register a policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { name: { type: string }, text: { type: string } }
      responses: { '201': { description: Created } }
  /rde/decompose:
    post:
      summary: Decompose policy text
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { policyId: { type: string }, text: { type: string } }
      responses: { '200': { description: OK } }
  /evidence/coverage:
    get:
      summary: Evidence coverage
      parameters: [ { in: query, name: scopeId, schema: { type: string } } ]
      responses: { '200': { description: OK } }
